#!/usr/bin/env python

import argparse
import json as JSON
import re

import requests
import yaml


class ParsePage(object):
    def __init__(self, page):
        self.page = page
        self._comment = None

    @property
    def comment(self):
        if not self._comment:

            html = requests.get(f"https://review.opendev.org/changes/{self.page}?o=MESSAGES", headers={"Content-Type": "application/json;charset=UTF-8"})
            json = JSON.loads(html.text[5:])
            messages = json['messages']
            for idx in range(len(messages)-1, -1, -1):
                if 'tag' in messages[idx]:
                    if messages[idx]['tag'] == "autogenerated:zuul:check":
                        self._comment = messages[idx]['message']
                        break
        return self._comment

    def find_job_url(self, regexp):
        regex = re.compile("{} (http.?://[^ ]+)".format(regexp))
        match = re.findall(regex, self.comment)

        if match:
            return match[0]
        return None


class Review(object):
    def __init__(self, review, template, job):
        self.review = review
        self.template = template
        self.job = job
        self.url = ''

    @staticmethod
    def find_log_url(base_url):
        """Get the next raw <a> element relative to a element from regexp"""

        url = requests.get(base_url.replace('/t/','/api/tenant/')).json()['log_url']
        print(url)
        return url

    def final_yaml_def(self, url):
        reproducer = requests.get(url).text

        job_yaml = yaml.safe_load(reproducer)
        with open(self.template, "r") as f:
            template_def = yaml.safe_load(f)
        vars_def = template_def[0]['tasks'][0]['vars']

        vars_def['depends_on'] = job_yaml[2]['vars']['depends_on']
        vars_def['zuul_yaml'] = job_yaml[2]['vars']['zuul_yaml']
        if 'launch_job_branch' in job_yaml[2]['vars']:
            vars_def['launch_job_branch'] = job_yaml[2]['vars']['launch_job_branch']
        return yaml.safe_dump(template_def)


def main():
    parser = argparse.ArgumentParser()

    parser.add_argument("-r", "--review", type=str, required=True)
    parser.add_argument("-t", "--template", type=str, default='job-template.yaml')
    parser.add_argument("-j", "--job", type=str, required=True)
    options = parser.parse_args()

    review = Review(options.review, options.template, options.job)
    zuul_url = ParsePage(options.review).find_job_url(options.job)
    log_url = review.find_log_url(zuul_url)
    yaml = review.final_yaml_def(f"{log_url}logs/reproducer-quickstart/launcher-playbook.yaml")

    print(f"reproducer YAML for review https://review.opendev.org/{options.review}")
    print("=========================")
    print(yaml)


if __name__ == '__main__':
    main()
