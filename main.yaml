---
# Deploy an instance on psi that runs a reproducer stack.
#
# More there
# https://github.com/rdo-infra/ansible-role-tripleo-ci-reproducer/blob/master/README.md#requirements
- name: launch a reproducer runner instance
  hosts: localhost
  gather_facts: false
  vars:
    env_name: "{{ prefix }}"
  tasks:
    - import_tasks: create-network.yaml
      tags:
        - network

    - name: create the key
      os_keypair:
        state: present
        cloud: "{{ cloud_name }}"
        name: "{{ env_name }}"
        public_key_file: "{{ public_key_file }}"

    - name: launch an instance
      os_server:
        state: present
        cloud: "{{ cloud_name }}"
        name: "{{ env_name }}"
        image: "CentOS-8-x86_64-GenericCloud-released-latest"
        availability_zone: nova
        # if ephemeral needs >=8gb
        flavor: "m1.large"
        network: "{{ env_name }}-net"
        floating_ip_pools: "{{ public_network_name }}"
        delete_fip: yes
        key_name: "{{ env_name }}"
        security_groups:
          - "{{ env_name }}-security-group"
      register: instance
      tags:
        - always

    - name: Save instance variable definition
      copy:
        content: "{{ instance | to_nice_json }}"
        dest: /tmp/reproducer-instance.json
      environment:
        PYTHONPATH: "/usr/lib64/python3.8/site-packages/"

    - name: add instance public ip to host group in memory
      add_host:
        hostname: "{{ instance.server.public_v4 }}"
        ansible_ssh_private_key_file: "{{ public_key_file|replace('.pub','') }}"
        ansible_ssh_common_args: '-oUserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no'
        ansible_ssh_user: centos
        groups: cloud_vm
      tags:
        - always

    - name: create application credential
      os_application_credentials:
        cloud: "{{ cloud_name }}"
        name: "{{ env_name }}"
        secret: "{{ secret }}"
        project_id: "{{ cloud_project_id }}"

    - name: print instance details to console
      debug:
        msg: "Instance created, log in using 'ssh -i {{ public_key_file|replace('.pub', '') }} -oUserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no centos@{{ instance.server.public_v4 }}'"
      tags:
        - always

- name: Setup the new host
  hosts: cloud_vm
  gather_facts: false
  tags:
    - provision
  vars:
    env_name: "{{ prefix }}"
  tasks:
    - name: wait for instance to become reachable
      wait_for_connection:
        timeout: 900

    - name: Gather facts for cloud_vm
      setup:

    - import_tasks: install-reproducer.yaml
      become: true

    - name: Run bootstrap
      shell:
        cmd: "ansible-playbook -v boostrap_reproducer.yaml --skip-tags launch > /home/centos/bootstrap_reproducer.log"
        creates: /home/centos/bootstrap_reproducer.log

    - name: Example job script
      copy:
        content: |
          #!/bin/bash

          ansible-playbook -v --tags start /home/centos/job_example.yaml
        dest: /home/centos/job_example.sh
        owner: centos
        group: centos
        mode: 0700

- name: Give user details about what is available.
  hosts: localhost
  gather_facts: false
  tasks:

    - name: load instance variable
      include_vars: /tmp/reproducer-instance.json

    - name: print services details to console
      debug:
        msg: "Services created, ZUUL: http://{{ server.public_v4 }}:9000 GERRIT: http://{{ server.public_v4 }}:8080"
      tags:
        - always

    - name: print instance details to console
      debug:
        msg: "Instance created, log in using 'ssh -i {{ public_key_file|replace('.pub', '') }} -oUserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no centos@{{ server.public_v4 }}'"
      tags:
        - always

    - name: print services details to console
      debug:
        msg: "You may add the relevant entries to your /etc/hosts and ~/.ssh/config to ease access."
      tags:
        - always
